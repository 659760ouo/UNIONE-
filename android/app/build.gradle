plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.facebook.react'
    id 'com.google.gms.google-services' // Google Services (no duplicate plugins now)
}

// Resolve project root and React Native paths (preserved, cleaned up formatting)
def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

react {
    entryFile = file(
        ["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"]
            .execute(null, rootDir).text.trim()
    )
    reactNativeDir = new File(
        ["node", "--print", "require.resolve('react-native/package.json')"]
            .execute(null, rootDir).text.trim()
    ).getParentFile().getAbsoluteFile()
    hermesCommand = new File(
        ["node", "--print", "require.resolve('react-native/package.json')"]
            .execute(null, rootDir).text.trim()
    ).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(
        ["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"]
            .execute(null, rootDir).text.trim()
    ).getParentFile().getAbsoluteFile()

    enableBundleCompression = (findProperty('android.enableBundleCompression') ?: false).toBoolean()
    cliFile = new File(
        ["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"]
            .execute(null, rootDir).text.trim()
    )
    bundleCommand = "export:embed"
    autolinkLibrariesWithApp()
}

// Proguard and JSC config (preserved)
def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace 'com.yrsdaily.unione' // Matches your package name (correct)
    defaultConfig {
        applicationId 'com.yrsdaily.unione'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.debug // Note: Replace with production keystore for release!
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
        }
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }
    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
    // Consistent Java/Kotlin version (matches top-level config)
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs += "-Xjvm-default=all-compatibility"
    }
}

// Handle dynamic packaging options (preserved)
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",");
    for (i in 0..<options.size()) options[i] = options[i].trim();
    options -= ""

    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")
    implementation platform('com.google.firebase:firebase-bom:34.2.0') // Firebase BOM (correct)
    implementation 'com.google.firebase:firebase-analytics'

    // Fresco: Use rootProject.ext.frescoVersion (fixes unresolved "expoLibs" variable)
    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true"
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true"
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true"

    if (isGifEnabled) {
        implementation("com.facebook.fresco:animated-gif:${rootProject.ext.frescoVersion}")
    }
    if (isWebpEnabled) {
        implementation("com.facebook.fresco:webpsupport:${rootProject.ext.frescoVersion}")
        if (isWebpAnimatedEnabled) {
            implementation("com.facebook.fresco:animated-webp:${rootProject.ext.frescoVersion}")
        }
    }

    // Hermes/JSC (preserved, uses build config)
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}